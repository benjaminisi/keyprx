buildscript {
	ext {
//		springBootVersion = '2.0.1.RELEASE'
        springBootVersion = '1.5.10.RELEASE'

	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

ext {
	groovyVersion = '2.4.13'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.dbenjamin'
version = '1.0.0'


sourceSets {
	main.java.srcDir "src/main/java"
	main.resources.srcDir "src/main/resources"
	test.java.srcDir "src/test/unit/java"
	test.resources.srcDir "src/test/unit/resources"
}

// always run the tests.  Note that combining the tests would make them much faster (just one Spring startup)
test.outputs.upToDateWhen {false}

/*

springBoot {
    executable = true
}

bootJar{
    launchScript()
    //baseName = 'keyprx'
    //version = '1.0.0'
	//manifest {
	//	attributes 'Main-Class': 'com.dbenjamin.keyprx.KeyprxApplication'
	//}
}
*/

repositories {
	mavenCentral()
    jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.apache.cxf:cxf-spring-boot-starter-jaxrs:3.1.11')
	compile 'org.springframework.data:spring-data-rest-hal-browser' // Browse the API
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('org.postgresql:postgresql')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	//testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')

    // https://mvnrepository.com/artifact/com.h2database/h2
    testCompile group: 'com.h2database', name: 'h2', version: '1.3.148'


}


// works with every Gradle version
task wrapper(type: Wrapper) {
	gradleVersion = '4.5.1'
}
/*

tasks.withType(Test) {
    maxHeapSize = "1g"
    jvmArgs '-XX:MaxMetaspaceSize=128m'
    testLogging {
        exceptionFormat = 'full'
    }
}
*/

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.memoryMaximumSize = '256m'
}
